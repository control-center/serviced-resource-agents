#!/bin/bash
#
#
#           Resource agent for managing serviced resources.
#
# Modeled from https://github.com/madkiss/openstack-resource-agents
#
# Copyright 2015 The Serviced Authors.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# OCF instance parameters:
# OCF_RESKEY_binary
# OCF_RESKEY_config
# OCF_RESKEY_pid
##############################################################################
# Initialization

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

##############################################################################

# Fill in some defaults if no values are specified

OCF_RESKEY_binary_default="serviced"
OCF_RESKEY_config_default="/etc/default/serviced"
OCF_RESKEY_pid_default="$HA_RSCTMP/$OCF_RESOURCE_INSTANCE.pid"
OCF_RESKEY_verbose_default="false"

: ${OCF_RESKEY_binary=${OCF_RESKEY_binary_default}}
: ${OCF_RESKEY_config=${OCF_RESKEY_config_default}}
: ${OCF_RESKEY_pid=${OCF_RESKEY_pid_default}}
: ${OCF_RESKEY_verbose=${OCF_RESKEY_verbose_default}}


##############################################################################

usage() {
    cat <<UEND
        usage: $0 (start|stop|validate-all|meta-data|status|monitor)

        $0 manages Control Center Master Service (serviced) process as an HA resource.

        The 'start' operation starts the serviced service.
        The 'stop' operation stops the serviced service.
        The 'validate-all' operation reports whether the parameters are valid.
        The 'meta-data' operation reports this RA's meta-data information.
        The 'status' operation reports whether the serviced service is running
        The 'monitor' operation reports whether the serviced service seems to be working.
UEND
}

meta_data() {
    cat <<END
<?xml version="1.0" ?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="serviced">
<version>1.0</version>

<longdesc lang="en">
Resource agent for the Control Center Master Service (serviced)
Manages the Control Center Master Service which orchestrates
execution of one or more dockerized application microservices
across a set of Control Center Delegates.
</longdesc>
<shortdesc lang="en">Manages the Control Center Master Service (serviced)</shortdesc>

<parameters>

<parameter name="binary" unique="0" required="0">
<longdesc lang="en">
Location of the Control Center binary (serviced)
</longdesc>
<shortdesc lang="en">Control Center binary (serviced)</shortdesc>
<content type="string" default="${OCF_RESKEY_binary_default}" />
</parameter>

<parameter name="config" unique="0" required="0">
<longdesc lang="en">
Location of the Control Center (serviced) configuration file
</longdesc>
<shortdesc lang="en">Control Center (serviced) configuration file</shortdesc>
<content type="string" default="${OCF_RESKEY_config_default}" />
</parameter>

<parameter name="pid" unique="0" required="0">
<longdesc lang="en">
The pid file to use for this Control Center (serviced) instance
</longdesc>
<shortdesc lang="en">Control Center (serviced) pid file</shortdesc>
<content type="string" default="${OCF_RESKEY_pid_default}" />
</parameter>

<parameter name="verbose" unique="0" required="0">
<longdesc lang="en">
Enable verbose logging for this resource agent
</longdesc>
<shortdesc lang="en">Set to 'true' to enable verbose logging</shortdesc>
<content type="string" default="${OCF_RESKEY_verbose}" />
</parameter>

</parameters>

<actions>
<action name="start" timeout="360" />
<action name="stop" timeout="130" />
<action name="status" timeout="20" />
<action name="monitor" timeout="30" interval="30" />
<action name="validate-all" timeout="5" />
<action name="meta-data" timeout="5" />
</actions>
</resource-agent>
END
}

##############################################################################
# Utility function to log additionaly INFO level messages when this resource
# agent is running in verbose mode.
#
# To enable verbose mode, use "pcs resource update serviced verbose=true"
#
# To disable verbose mode, use "pcs resource update serviced verbose="
#
# To view the current mode, use "pcs resource show serviced" and inspect
# the line for "Attributes:". If no "Attributes:" line is displayed, or it
# does not contain verbose=true, then verbose mode is disabled.
#
verbose_log() {
    if [ "${OCF_RESKEY_verbose}" != "true" ]; then
        return
    fi

    ocf_log info $*
}

##############################################################################
# Functions invoked by resource manager actions

serviced_validate() {
    local rc
    check_binary $OCF_RESKEY_binary
    check_binary docker

    if [ ! -f $OCF_RESKEY_config ]; then
        ocf_log err "Config $OCF_RESKEY_config doesn't exist"
        return $OCF_ERR_INSTALLED
    fi

    return $OCF_SUCCESS
}

serviced_status() {
    local pid
    local rc

    ocf_pidfile_status $OCF_RESKEY_pid
    rc=$?
    if [ $rc -eq 2 ]; then
        ocf_log info "serviced_status - Control Center (serviced) is not running"
        return $OCF_NOT_RUNNING
    elif [ $rc -eq 1 ]; then
        ocf_log info "serviced_status - Old PID file found, but Control Center (serviced) is not running"
        return $OCF_NOT_RUNNING
    fi

    return $OCF_SUCCESS
}

serviced_monitor() {
    local rc
    local phase

    #
    # serviced_monitor is called while starting the service (serviced_start)
    # and by PCS for periodic monitoring.
    #
    # When phase equals 'startup' that means we are being called during startup
    # and do not log details about healthcheck failures because we expect
    # healthchecks to fail several times before CC has completed enough of it's
    # startup to begin accepting requests.
    #
    if [ $# -eq 1 ]; then
        phase=$1
    fi

    # If status returned anything but success, return that immediately
    serviced_status
    rc=$?
    if [ $rc -ne $OCF_SUCCESS ]; then
        return $rc
    fi

    LIST_CMD="service list --show-fields Name,ServiceID --ascii"
    LIST_RESULTS=`${OCF_RESKEY_binary} ${LIST_CMD} 2>&1`
    if [[ ! $LIST_RESULTS =~ ^(no services found|Name[[:space:]]+ServiceID) ]]; then
        if [[ "$phase" != "startup" ]] || [[ "${OCF_RESKEY_verbose}" == "true" ]]; then
            ocf_log err "serviced_monitor - Control Center (serviced) failed healthcheck"
            ocf_log info "serviced_monitor - Result of '${OCF_RESKEY_binary} ${LIST_CMD}' = '${LIST_RESULTS}'"
        fi
        return $OCF_ERR_GENERIC
    fi

    if [ "${LIST_RESULTS}" == "no services found" ]; then
        verbose_log "serviced_monitor - no leaf services found"
        return $OCF_SUCCESS
    fi

    verbose_log "serviced_monitor - LIST_RESULTS='${LIST_RESULTS}'"

    # Find the id of a 'leaf' service; i.e. one with no child services.
    # With the ASCII output format, the list of services will have a "+" preceding services
    # that have children (so exclude those).
    # The particular service choosen doesn't matter, so get the last one in the list.
    #
    # This technique is used to avoid hard-coding any particular service name
    LEAF_SERVICE_ID=`echo "${LIST_RESULTS}" | grep -v \+ 2>&1 | tail -n 1 2>&1 | awk '{print $2}' 2>&1`
    verbose_log "serviced_monitor - found LEAF_SERVICE_ID='${LEAF_SERVICE_ID}'"

    # Now check the service status which will exercise calls to both the database
    # and to zookeeper. At this point, we are not interested in the status of the particular
    # service - instead, we want to exercise enough of the CC internals to demonstrate that
    # it can respond to basic commands. Note that 'service status' is bit more involved than
    # 'service list'.
    STATUS_CMD="service status --show-fields Name,Status ${LEAF_SERVICE_ID}"
    STATUS_RESULTS=`${OCF_RESKEY_binary} ${STATUS_CMD} 2>&1`
    if [[ ! $STATUS_RESULTS =~ ^(service not found|Name[[:space:]]+Status) ]]; then
        if [[ "${phase}" != "startup" ]] || [[ "${OCF_RESKEY_verbose}" == "true" ]]; then
            ocf_log err "serviced_monitor - Control Center (serviced) failed healthcheck"
            ocf_log info "serviced_monitor - Result of '${OCF_RESKEY_binary} ${STATUS_CMD}' = '${STATUS_RESULTS}'"
        fi
        return $OCF_ERR_GENERIC
    fi
    verbose_log "serviced_monitor - found STATUS_RESULTS='${STATUS_RESULTS}'"

    return $OCF_SUCCESS
}

serviced_start() {
    local rc

    serviced_status
    rc=$?
    if [ $rc -eq $OCF_SUCCESS ]; then
        ocf_log info "serviced_start - Control Center (serviced) already running"
        return $OCF_SUCCESS
    fi

    # Start serviced and record the PID
    ocf_run -q systemctl start serviced
    systemctl status serviced | grep "Main PID:" | awk '{print $3}' > $OCF_RESKEY_pid

    # Spin waiting for the server to come up.
    # Let the CRM/LRM time us out if required
    ocf_log info "serviced_start - begin monitoring startup of Control Center (serviced)"
    while true; do
        # if the server is not running, then exit immediately
        serviced_status
        rc=$?
        [ $rc -ne $OCF_SUCCESS ] && exit $OCF_ERR_GENERIC

        # wait for the monitor to be successful
        serviced_monitor startup
        rc=$?
        if [ $rc -eq $OCF_SUCCESS ]; then
            break
        fi

        ocf_log info "serviced_start - Control Center (serviced) has not started yet, waiting"
        sleep 2
    done

    ocf_log info "serviced_start - Control Center (serviced) started"
    return $OCF_SUCCESS
}

serviced_stop() {
    local rc
    local pid

    serviced_status
    rc=$?
    if [ $rc -eq $OCF_NOT_RUNNING ]; then
        ocf_log info "serviced_stop - Control Center (serviced) already stopped"
        return $OCF_SUCCESS
    fi

    # Try a normal shutdown.
    # Execute in the background so that we can use our own shutdown_timeout
    ocf_log info "serviced_stop - begin shutdown of Control Center (serviced)"
    systemctl stop serviced &

    # stop waiting
    shutdown_timeout=60
    if [ -n "$OCF_RESKEY_CRM_meta_timeout" ]; then
        shutdown_timeout=$((($OCF_RESKEY_CRM_meta_timeout/1000)-7))
    fi

    count=0
    while [ $count -lt $shutdown_timeout ]; do
        serviced_status
        rc=$?
        if [ $rc -eq $OCF_NOT_RUNNING ]; then
            break
        fi
        count=`expr $count + 1`
        sleep 1
        verbose_log "serviced_stop - Control Center (serviced) still hasn't stopped yet. Waiting ..."
    done

    serviced_status
    rc=$?
    if [ $rc -ne $OCF_NOT_RUNNING ]; then
        # SIGTERM didn't help, try SIGKILL
        ocf_log info "serviced_stop - Control Center (serviced) failed to stop after ${shutdown_timeout}s \
            using SIGTERM.  Trying SIGKILL ..."

        pid=`cat $OCF_RESKEY_pid`
        ocf_run kill -s KILL $pid

        # wait a moment for the process to fully die
        sleep 2
        serviced_status
        rc=$?
        if [ $rc -ne $OCF_NOT_RUNNING ]; then
            ocf_log err "serviced_stop - Control Center (serviced) could not be stopped"
            return $rc
        fi
    fi

    ocf_log info "serviced_stop - Control Center (serviced) stopped"
    rm -f $OCF_RESKEY_pid

    return $OCF_SUCCESS
}

##############################################################################

case "$1" in
meta-data)          meta_data
                    exit $OCF_SUCCESS;;
usage|help)         usage
                    exit $OCF_SUCCESS;;
esac

# Anything except meta-data and help must pass validation
serviced_validate || exit $?

# What kind of method was invoked?
case "$1" in
start)              serviced_start;;
stop)               serviced_stop;;
status)             serviced_status;;
monitor)            serviced_monitor;;
validate-all)       ;;
*)                  usage
                    exit $OCF_ERR_UNIMPLEMENTED;;
esac
