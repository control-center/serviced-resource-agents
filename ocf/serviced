#! /bin/bash
#
#
#           Resource agent for managing serviced resources.
#
# Modeled from https://github.com/madkiss/openstack-resource-agents
#
# Copyright 2015 The Serviced Authors.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# OCF instance parameters:
# OCF_RESKEY_binary
# OCF_RESKEY_config
# OCF_RESKEY_pid
##############################################################################
# Initialization

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs

##############################################################################

# Fill in some defaults if no values are specified

OCF_RESKEY_binary_default="serviced"
OCF_RESKEY_config_default="/etc/default/serviced"
OCF_RESKEY_pid_default="$HA_RSCTMP/$OCF_RESOURCE_INSTANCE.pid"
OCF_RESKEY_rpcport_default="4979"

: ${OCF_RESKEY_binary=${OCF_RESKEY_binary_default}}
: ${OCF_RESKEY_config=${OCF_RESKEY_config_default}}
: ${OCF_RESKEY_pid=${OCF_RESKEY_pid_default}}
: ${OCF_RESKEY_rpcport=${OCF_RESKEY_rpcport_default}}

##############################################################################

usage() {
    cat <<UEND
        usage: $0 (start|stop|validate-all|meta-data|status|monitor)

        $0 manages Control Center Master Service (serviced) process as an HA resource.

        The 'start' operation starts the serviced service.
        The 'stop' operation stops the serviced service.
        The 'validate-all' operation reports whether the parameters are valid.
        The 'meta-data' operation reports this RA's meta-data information.
        The 'status' operation reports whether the serviced service is running
        The 'monitor' operation reports whether the serviced service seems to be working.
UEND
}

meta_data() {
    cat <<END
<?xml version="1.0" ?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="serviced">
<version>1.0</version>

<longdesc lang="en">
Resource agent for the Control Center Master Service (serviced)
May manage a serviced instance that manages a set of serviced agents on varying
hosts.
</longdesc>
<shortdesc lang="en">Manages the Control Center Master Service (serviced)</shortdesc>

<parameters>

<parameter name="binary" unique="0" required="0">
<longdesc lang="en">
Location of the Control Center binary (serviced)
</longdesc>
<shortdesc lang="en">Control Center binary (serviced)</shortdesc>
<content type="string" default="${OCF_RESKEY_binary_default}" />
</parameter>

<parameter name="config" unique="0" required="0">
<longdesc lang="en">
Location of the Control Center (serviced) configuration file
</longdesc>
<shortdesc lang="en">Control Center (serviced) configuration file</shortdesc>
<content type="string" default="${OCF_RESKEY_config_default}" />
</parameter>

<parameter name="pid" unique="0" required="0">
<longdesc lang="en">
The pid file to use for this Control Center (serviced) instance
</longdesc>
<shortdesc lang="en">Control Center (serviced) pid file</shortdesc>
<content type="string" default="${OCF_RESKEY_pid_default}" />
</parameter>

</parameters>

<actions>
<action name="start" timeout="60" />
<action name="stop" timeout="60" />
<action name="status" timeout="20" />
<action name="monitor" timeout="30" interval="20" />
<action name="validate-all" timeout="5" />
<action name="meta-data" timeout="5" />
</actions>
</resource-agent>
END
}


##############################################################################
#
# Internal method to release NFS mounts used by serviced.
#
# serviced is responsible for starting NFS, adding entries to /etc/exports,
# and exporting /opt/serviced/var/volumes. When a failover occurs, we need to
# make sure that /opt/serviced/var/volumes is no longer exported and mounted.
#
nfs_umount() {
    ocf_log info "Unexporting all NFS volumes"
    exportfs -ua

    ocf_log info "Unmounting /exports/serviced_var_volumes"
    umount -f /exports/serviced_var_volumes
}

##############################################################################
# Functions invoked by resource manager actions

serviced_validate() {
    local rc
    check_binary $OCF_RESKEY_binary
    check_binary docker

    if [ ! -f $OCF_RESKEY_config ]; then
        ocf_log err "Config $OCF_RESKEY_config doesn't exist"
        return $OCF_ERR_INSTALLED
    fi

    return $OCF_SUCCESS
}

serviced_status() {
    local pid
    local rc

    ocf_pidfile_status $OCF_RESKEY_pid
    rc=$?
    if [ $rc -eq 2 ]; then
        ocf_log info "Control Center (serviced) is not running"
        return $OCF_NOT_RUNNING
    elif [ $rc -eq 1 ]; then
        ocf_log info "Old PID file found, but Control Center (serviced) is not running"
        return $OCF_NOT_RUNNING
    fi

    return $OCF_SUCCESS
}

serviced_monitor() {
    local rc

    # If status returned anything but success, return that immediately
    serviced_status
    rc=$?
    if [ $rc -ne $OCF_SUCCESS ]; then
        return $rc
    fi

    # Spin waiting for a valid healthcheck response
    while true; do
        ocf_run -info ${OCF_RESKEY_binary} healthcheck
        rc=$?
        [ $rc -eq 0 ] && break
        if [ $rc -ne 2 ]; then
            ocf_log err "Control Center (serviced) failed healthchecks"
            return $OCF_NOT_RUNNING
        fi
        sleep 1
    done

    return $OCF_SUCCESS
}

serviced_start() {
    local rc

    serviced_status
    rc=$?
    if [ $rc -eq $OCF_SUCCESS ]; then
        ocf_log info "Control Center (serviced) already running"
        return $OCF_SUCCESS
    fi

    # Start serviced and record the PID
    ocf_run -q systemctl start serviced
    systemctl status serviced | grep "Main PID:" | awk '{print $3}' > $OCF_RESKEY_pid

    # Spin waiting for the server to come up.
    # Let the CRM/LRM time us out if required
    while true; do
        # if the server is not running, then exit immediately
        serviced_status
        rc=$?
        [ $rc -ne $OCF_SUCCESS ] && exit $OCF_ERR_GENERIC

        # wait for the monitor to be successful
        serviced_monitor
        rc=$?
        [ $rc -eq $OCF_SUCCESS ] && break
        if [ $rc -ne $OCF_NOT_RUNNING ]; then
            ocf_log err "Control Center (serviced) start failed"
            return $rc
        fi
        sleep 1
    done

    ocf_log info "Control Center (serviced) started"
    return $OCF_SUCCESS
}

serviced_stop() {
    local rc
    local pid

    serviced_status
    rc=$?
    if [ $rc -eq $OCF_NOT_RUNNING ]; then
        ocf_log info "Control Center (serviced) already stopped"
        return $OCF_SUCCESS
    fi

    # Try a normal shutdown.
    # Execute in the background so that we can use our own shutdown_timeout
    systemctl stop serviced &

    # stop waiting
    shutdown_timeout=60
    if [ -n "$OCF_RESKEY_CRM_meta_timeout" ]; then
        shutdown_timeout=$((($OCF_RESKEY_CRM_meta_timeout/1000)-5))
    fi

    count=0
    while [ $count -lt $shutdown_timeout ]; do
        serviced_status
        rc=$?
        if [ $rc -eq $OCF_NOT_RUNNING ]; then
            break
        fi
        count=`expr $count + 1`
        sleep 1
        ocf_log debug "Control Center (serviced) still hasn't stopped yet. Waiting ..."
    done

    serviced_status
    rc=$?
    if [ $rc -ne $OCF_NOT_RUNNING ]; then
        # SIGTERM didn't help, try SIGKILL
        ocf_log info "Control Center (serviced) failed to stop after ${shutdown_timeout}s \
            using SIGTERM.  Trying SIGKILL ..."

        pid=`cat $OCF_RESKEY_pid`
        ocf_run kill -s KILL $pid

        # wait a moment for the process to fully die
        sleep 2
        serviced_status
        rc=$?
        if [ $rc -ne $OCF_NOT_RUNNING ]; then
            ocf_log err "Control Center (serviced) could not be stopped"
            nfs_umount
            return $rc
        fi
    fi

    ocf_log info "Control Center (serviced) stopped"
    rm -f $OCF_RESKEY_pid

    nfs_umount

    return $OCF_SUCCESS
}

##############################################################################

case "$1" in
meta-data)          meta_data
                    exit $OCF_SUCCESS;;
usage|help)         usage
                    exit $OCF_SUCCESS;;
esac

# Anything except meta-data and help must pass validation
serviced_validate || exit $?

# What kind of method was invoked?
case "$1" in
start)              serviced_start;;
stop)               serviced_stop;;
status)             serviced_status;;
monitor)            serviced_monitor;;
validate-all)       ;;
*)                  usage
                    exit $OCF_ERR_UNIMPLEMENTED;;
esac
